项目控制台
#1.发布仓库前使用下面命令查看是否有无警告和错误提示
flutter packages pub publish --dry-run
#2.发布仓库
flutter packages pub publish

解决发布冲突如下：
在 Flutter 里准备发布 package 时，如果遇到 依赖包冲突，一般是因为你的 pubspec.yaml 里指定的依赖版本和别的依赖（或 Flutter SDK 自带的依赖）要求的版本不兼容。
解决思路分几步走：

🔍 常见冲突场景
1.直接依赖冲突
你写的 pubspec.yaml 里依赖了某个包的版本，而另外一个依赖也要求不同版本。

2.Flutter SDK 自带依赖冲突
Flutter SDK 自带了某些包（比如 collection、async），你指定的版本和 SDK 里不一致。

3.传递依赖冲突
你并没有直接依赖某个包，但它被其他依赖引用了。


✅ 解决方案
1. 使用语义化版本范围
在 pubspec.yaml 里避免写死版本，比如：
    dependencies:
      http: ^1.1.0   # 推荐用 ^ 而不是 =1.1.0
这样 Dart 的依赖解析器（pub get）有更大空间选择兼容的版本。

2. 使用 dependency_overrides
如果必须要强制某个版本，可以在 pubspec.yaml 里加：
    dependency_overrides:
      http: ^1.1.0
⚠️ 但是注意：如果你要 发布 package 到 pub.dev，不要保留 dependency_overrides。这是临时解决本地冲突的方法，不是长期方案。

3. 检查 Flutter SDK 约束
确认 pubspec.yaml 顶部的环境约束正确：
    environment:
      sdk: ">=3.0.0 <4.0.0"
      flutter: ">=3.10.0"
如果环境太旧，某些依赖新版本可能不兼容。

4. 用 flutter pub deps 找冲突源
执行：
    flutter pub deps --style=compact
可以查看依赖树，找到到底是哪个依赖拉进了冲突版本。

5. 用 resolution_strategy（Flutter 3.27+ 支持）
在新版本的 pubspec.yaml 可以加：
    resolution_strategy:
      force_latest:
        - collection
        - http
让 Dart 在冲突时强制选最新版，代替 dependency_overrides，而且 可以发布到 pub.dev。


🚀 最佳实践（发布 package 时）
1.避免写死依赖版本 → 用 ^ 或 >= … < …。
2.确保 CI 跑过 flutter pub publish --dry-run → 它会提示依赖问题。
3.如果依赖升级太快，尽量兼容更宽版本范围，比如：
    dependencies:
      http: ">=0.13.0 <2.0.0"
这样你同时支持老项目和新项目。